import React, {useState} from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import Navbar from '../components/Navbar';

interface Flashcard {
    id?: string; // Make id optional since it will be generated by the server
    question: string;
    answer: string;
    category: string;
    sourceLang: string;
    targetLang: string;
}

const AddBulkFlashcards: React.FC = () => {
    const [bulkCards, setBulkCards] = useState<Flashcard[]>([
        {question: "", answer: "", category: "", sourceLang: "", targetLang: ""}
    ]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const navigate = useNavigate();

    const handleBulkChange = (index: number, field: keyof Flashcard, value: string) => {
        const updated = [...bulkCards];
        updated[index] = {
            ...updated[index],
            [field]: value
        };
        setBulkCards(updated);
    };

    const handleNext = () => {
        // Validate current card before moving to next
        if (!validateCard(bulkCards[currentIndex])) {
            setError("Proszƒô wype≈Çniƒá wszystkie pola przed przej≈õciem dalej");
            return;
        }
        
        setError(null);
        
        if(currentIndex === bulkCards.length - 1) {
            setBulkCards(prev => [
                ...prev,
                {question: "", answer: "", category: "", sourceLang: "", targetLang: ""}
            ]);
        }
        setCurrentIndex(prev => prev + 1);
    };

    const handlePrevious = () => {
        if(currentIndex > 0) {
            setCurrentIndex(prev => prev - 1);
            setError(null);
        }
    };

    const validateCard = (card: Flashcard): boolean => {
        return !!(card.question && card.answer && card.category && card.sourceLang && card.targetLang);
    };

    const handleBulkSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        
        // Validate current card
        if (!validateCard(bulkCards[currentIndex])) {
            setError("Proszƒô wype≈Çniƒá wszystkie pola przed zapisaniem");
            return;
        }
        
        // Filter out any empty cards
        const validCards = bulkCards.filter(card => 
            card.question && card.answer && card.category && card.sourceLang && card.targetLang
        );
        
        if (validCards.length === 0) {
            setError("Nie mo≈ºna zapisaƒá pustego zestawu");
            return;
        }
        
        setIsSubmitting(true);
        setError(null);
        
        try {
            const token = localStorage.getItem('authToken');
            
            if (!token) {
                setError("Nie znaleziono tokenu uwierzytelniajƒÖcego. Zaloguj siƒô ponownie.");
                setIsSubmitting(false);
                return;
            }
            
            // Use the correct endpoint and include the token
            await axios.post("http://localhost:3001/flashcards/bulk", validCards, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            
            navigate("/show-flashcards-sets");
        } catch (error) {
            console.error("B≈ÇƒÖd podczas dodawania zestawu: ", error);
            setError("WystƒÖpi≈Ç b≈ÇƒÖd podczas zapisywania zestawu. Spr√≥buj ponownie.");
            setIsSubmitting(false);
        }
    };

    const currentCard = bulkCards[currentIndex];
   
    return (
        <div className="p-6 max-w-4xl mx-auto">
            <Navbar />
            <h1 className="text-2xl font-bold mb-6">Dodaj zestaw fiszek</h1>
            
            {error && (
                <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
                    {error}
                </div>
            )}
            
            <div className="mb-4 text-gray-600">
                Dodajesz fiszkƒô {currentIndex + 1} z {bulkCards.length}
            </div>

            <form onSubmit={handleBulkSubmit} className="space-y-6">
                <fieldset className="border border-gray-300 p-4 rounded-md">
                    <legend className="font-semibold text-lg mb-2">Fiszka {currentIndex + 1}</legend>

                    <div className="mb-4">
                        <label className="block mb-1 font-medium">Pytanie</label>
                        <input
                            type="text"
                            placeholder="Pytanie"
                            value={currentCard.question}
                            onChange={(e) => handleBulkChange(currentIndex, "question", e.target.value)}
                            className="w-full border p-2 rounded"
                            required
                        />
                    </div>

                    <div className="mb-4">
                        <label className="block mb-1 font-medium">Odpowied≈∫</label>
                        <input
                            type="text"
                            placeholder="Odpowied≈∫"
                            value={currentCard.answer}
                            onChange={(e) => handleBulkChange(currentIndex, "answer", e.target.value)}
                            className="w-full border p-2 rounded"
                            required
                        />
                    </div>

                    <div className="mb-4">
                        <label className="block mb-1 font-medium">Kategoria</label>
                        <input
                            type="text"
                            placeholder="Kategoria"
                            value={currentCard.category}
                            onChange={(e) => handleBulkChange(currentIndex, "category", e.target.value)}
                            className="w-full border p-2 rounded"
                            required
                        />
                    </div>

                    <div className="mb-4">
                        <label className="block mb-1 font-medium">Jƒôzyk ≈∫r√≥d≈Çowy</label>
                        <select
                            value={currentCard.sourceLang}
                            onChange={(e) => handleBulkChange(currentIndex, "sourceLang", e.target.value)}
                            className="w-full border p-2 rounded"
                            required
                        >
                            <option value="">Wybierz jƒôzyk ≈∫r√≥d≈Çowy</option>
                            <option value="pl">Polski</option>
                            <option value="en">Angielski</option>
                            <option value="de">Niemiecki</option>
                        </select>
                    </div>

                    <div>
                        <label className="block mb-1 font-medium">Jƒôzyk docelowy</label>
                        <select
                            value={currentCard.targetLang}
                            onChange={(e) => handleBulkChange(currentIndex, "targetLang", e.target.value)}
                            className="w-full border p-2 rounded"
                            required
                        >
                            <option value="">Wybierz jƒôzyk docelowy</option>
                            <option value="pl">Polski</option>
                            <option value="en">Angielski</option>
                            <option value="de">Niemiecki</option>
                        </select>
                    </div>
                </fieldset>

                <div className="flex justify-between">
                    <button
                        type="button"
                        onClick={handlePrevious}
                        disabled={currentIndex === 0}
                        className="bg-gray-200 px-4 py-2 rounded disabled:opacity-50"
                    >
                        ‚¨ÖÔ∏è Poprzednia
                    </button>

                    <button
                        type="button"
                        onClick={handleNext}
                        className="bg-gray-200 px-4 py-2 rounded"
                    >
                        ‚û°Ô∏è Nastƒôpna
                    </button>
                </div>

                <div className="mt-6">
                    <button
                        type="submit"
                        disabled={isSubmitting}
                        className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:opacity-50"
                    >
                        {isSubmitting ? "Zapisywanie..." : "üíæ Zapisz zestaw"}
                    </button>
                </div>
            </form>
        </div>
    );
};

export default AddBulkFlashcards;